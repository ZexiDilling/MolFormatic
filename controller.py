import os

from plate_formatting import daughter_plate_generator
from database_startup import DatabaseSetUp
from database_controller import FetchData, AddData
from csv_handler import CSVWriter, CSVConverter
from excel_handler import ExcelReader
from lc_data_handler import LCMSHandler
import configparser


def start_up_database(config):
    dbs = DatabaseSetUp(config)
    dbs.tables()


def amount_samples(plate_amount, samples_per_plate=384):
    """
    calculate the amount of samples needed depending on amount of mother plates.
    :param plate_amount: Amount of plates needed
    :param samples_per_plate: Amount of samples per plate
    :return: Total amount of samples needed
    """
    if not isinstance(samples_per_plate, int):
        return None
    if not samples_per_plate > 0:
        return None

    if isinstance(plate_amount, int):
        if plate_amount < 1:
            return None
        return plate_amount * samples_per_plate
    else:
        return None


def get_file_list(folder):
    """
    Generate a list of files in a folder
    :param folder: The path to the folder where data is located.
    :return: A list of files in the folder
    """

    return [f"{folder}/{files}" for files in os.listdir(folder)]


def mp_production(folder, mp_amount, mp_name="mp_2022", transferee_volume=9, ignore_active=False, sub_search=False, smiles=None,
                  sub_search_methode=None, threshold=None, source_table="compound_main", plate_list=None,
                  plate_layout=None, database="SCore.db"):
    """
    Generate list of compounds, based on number of motherplates only, or by sub_structure search.
    Generate comPOUND file for fecthing tubes from the comPOUND freezer.
    Generate tube_rack files based on plate_liste and comPOUND list.
    Generate PB-output files to compare with the real files, for double checking.
    :param folder: save location
    :param mp_amount: amount of samples
    :param mp_name: Start of barcode for motherplate. The rest is auto-generated by numbers
    :param transferee_volume: amount of liquid to transferee
    :param ignore_active: If the list needs to take into account compounds already in MotherPlates with more than
    1 uL volume left. - This might needs to be lowered...
    :param smiles: smiles code to compare compounds with for sub search
    :param sub_search: tuble (true/false) if it will use structure search to find compounds or not
    :param sub_search_methode: What method to use for making a substructure search
    :param threshold: This is for sub_searchs. how alike the compounds should minimum be
    :param source_table: The table from the database, where the samples are coming from. and the table where the
    structure search is used.
    :param plate_list: List of barcodes for racks.
    :param plate_layout: takes platelayout from "info.py" for where to place tubes. mapping well possessions with
    tubes should always be 96-well plate format.
    :param database: The database
    :return: None
    """

    sample_amount = amount_samples(mp_amount)
    fd = FetchData(database)
    csvw = CSVWriter()
    plated_compounds = []
    if not ignore_active:
        plated_compounds = [compounds for compounds in fd.data_search(1, "compound_mp")]


    # Gets a list of compounds, based on search criteria
    compound_list, liquid_warning_list, _, _, _, _ = fd.list_limiter(sample_amount, source_table, transferee_volume,
                                                                     sub_search, sub_search_methode, smiles, threshold,
                                                                     ignore_active, plated_compounds)

    # generate a CSV file that can be used to get tubes from the freezer
    csvw.compound_freezer_writer(folder, compound_list)

    # generate a CSV file that can be used to get tubes from the freezer
    # generate a CSV file for PB for the MP production.
    # csvw.compound_freezer_handler(folder, compound_list, mp_name, plate_list, plate_layout)


def mp_production_2d_to_pb(folder=None, folder_mp=None, trans_vol=9, mp_name="mp_2022"):
    """
    Convert tube_rack files to PlateButler-output file. stores the data in 'output_files/pb_output'.
    :param folder: Main output folder
    :param folder_mp: Folder for MotherPlate output files, from 2d-plate-scanner
    :param mp_name: Main name for MotherPlates_ there will be added running number.
    :return: None
     """

    folder = "C:/Users/Charlie/PycharmProjects/structure_search/output_files"
    #mp_production(folder)
    folder_mp = "C:/Users/Charlie/PycharmProjects/structure_search/output_files/mp_files_2022-06-10"
    tube_files = get_file_list(folder_mp)
    csvc = CSVConverter()
    csvc.mp_in_to_out(folder, tube_files, mp_name, trans_vol)


def dp_production(folder, mp_amount=10, transferee_volume=4, dp_file_type="384", table="join_main_mp",
                  excel_layout_file="Destination.xlsx", dp_name="dp_2022", sub_search=False, smiles=None,
                  threshold=None, sub_search_methode=None, database="SCore.db"):
    """
    Generate DaughterPlates based on MotherPlates. Either from random MotherPlates, based on nothing or from smiles.
    :param folder: folder for the main output_folder
    :param mp_amount: Amount of MotherPlates needed. Could be changed to amount of samples ?
    :param transferee_volume: Volume needed for transferee. also used to determent if there is enough liquid left in a
    MotherPlate
    :param dp_file_type: Plate tape for the DaughterPlate. (96, 384 or 1536)
    :param table: Table that is needed to look for data. Here it will be "Join_main_mp" as it is using a joint table
    :param excel_layout_file: Excel layout file. File generated in Excel for how the compounds should be placed in the
    DaughterPlate
    :param dp_name: Main name for dp production.
    :param sub_search: Tuble (true/false) if looking for compounds is with or without a structure search
    :param smiles: Smiles code for structure search
    :param threshold: Threshold for similarity between Smiles and compounds.
    :param sub_search_methode: What structure search method to use.
    :param database: Main Database
    :return: None
    """
    sample_amount = amount_samples(mp_amount, 50)
    fd = FetchData(database)
    csvw = CSVWriter()
    exr = ExcelReader()

    all_data = fd.list_limiter(sample_amount, table, transferee_volume,  sub_search, sub_search_methode, smiles,
                               threshold)

    compound_list, liquid_warning_list, row_data, mp_data, mp_mapping, plate_count = all_data
    # compound_list         -   list of compounds only
    # liquid_warning_list   -   list of compounds that are below 3 x volume needed (do not get spots with volume less that min_volume
    # row_data              -   dict with key = compound_id value = list of plate and well
    # mp_data               -   dict with keu = mp and value = list of all transferees with [well, id] per transferee
    # mp_mapping            -   List of Mother_Plate with location (when that is added to the table)
    # plate_count           -   a dict with amount of samples per Mother_Plate

    # generate layout from excel-file
    dp_layout, sample_amount = exr.layout_controller(dp_file_type, excel_layout_file)

    dp_layout = plate_layout_to_well_ditc(plate_playout)

    # generate a dict for Daughter_Plates
    dp_dict = daughter_plate_generator(mp_data, sample_amount, dp_name, dp_layout, transferee_volume)

    # generate CSV-file for PlateButler
    csvw.dp_writer(dp_dict, folder)


def update_database(data, table, file_type=None, database="SCore.db"):
    """
    Update the database with data. Both for adding data to the different tables, but updating tables with new values
    :param data: Output file from the plate_butler system, tube files for the comPOUND freezer, or other data.
    :param file_type: If the file is a CSV file, it needs a specific file_type to know how to handle the file.
    as the CSV files are different depending on where they are coming from.
    :param table: What table needs to be updated/where the data is going
    :param database: Main database
    :return: None
    """

    ad_db = AddData()

    ad_db.add_controller(table, data, file_type)


def purity_handler(folder, uv_one=False, uv_same_wavelength=254, wavelength="all", uv_threshold=2500,
                   rt_solvent_peak=2.5, ms_delta=0.25, ms_mode="pos", ms_threshold=50000000):
    """
    Takes raw data from LC/MS (UV and MS data) and mass from the database, per compound. and see if they can find the
    mass in the raw data, and then find the purity of the peak (based on retention time) for each compound
    :param folder: Folder with the raw-data
    :param uv_one: If it uses a single wavelength per compound or uses the whole PDA-range
    :param uv_same_wavelength: if it uses the same wavelength, what wavelength that is
    :param wavelength: set to all, if there is no wavelength for each individuel compound
    :param uv_threshold: minimum threshold for the UV signal. anything below will be ignored
    :param rt_solvent_peak: retention time for the solvent peak
    :param ms_delta: When looking for the MS data, how precise the mass should fit with the data.
    :param ms_mode: if you are looking at the positive or negative. Have not been set up to look at both yet.
    :param ms_threshold: minimum threshold for the MS signal. anything below will be ignored
    :return: None
    """
    lc_h = LCMSHandler()
    file_list = get_file_list(folder)

    # Get all information per compound, based on the main database, and raw data from LC/MS. Both UV and MS data.
    #
    compound_info = lc_h.lc_controller(file_list, uv_one, uv_same_wavelength, wavelength, uv_threshold, rt_solvent_peak,
                                       ms_delta, ms_mode, ms_threshold)

    update_database(compound_info, "SCore.db", "purity_data")


def main(folder):
    """

    :return: None
    """

    update_database(folder, "compound_main")



if __name__ == "__main__":
    config = configparser.ConfigParser()
    config.read("config.ini")
    start_up_database(config)
