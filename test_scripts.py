import configparser
from openpyxl.styles import PatternFill, Font
from openpyxl import Workbook, load_workbook
from pathlib import Path
import csv


def file_reader(files):

    missing_tubes = []
    file = Path(r"C:\Users\phch\Desktop\test\comPOUND\comPOUND_'2023-06-22'.txt")
    # file = Path(r"D:\MP\TubeRackBarcodes\3000307768.txt")
    with open(file) as temp_csv:
        rows = csv.reader(temp_csv, delimiter=';')
        for row, row_data in enumerate(rows):
            # print(row_data[1])
            missing_tubes.append(row_data[0])
    print(len(missing_tubes))
    tube_location = {}
    files = Path(r"D:\MP\TubeRackBarcodes")
    # files = Path(r"C:\Users\phch\OneDrive - Danmarks Tekniske Universitet\Mapper\Python_data\MP Production\All_plates")
    # files = list(files.iterdir())
    # for file in files:
    #     with open(file) as temp_csv:
    #         rows = csv.reader(temp_csv, delimiter=';')
    #
    #         for row, row_data in enumerate(rows):
    #             if row_data[1] in missing_tubes:
    #
    #                 try:
    #                     tube_location[file]
    #                 except KeyError:
    #                     tube_location[file] = [row_data[1]]
    #                 else:
    #                     tube_location[file].append(row_data[1])
    #
    # print(tube_location)
    # for locations in tube_location:
    #     print(locations)
    #     print(len(tube_location[locations]))



def excel_reader(file, folder):


    files = list(folder.iterdir())
    # files = [folder]
    all_data = {}
    all_data_2 = {}
    for counter, temp_file in enumerate(files):
        if temp_file.suffix == ".csv":
            with open(temp_file) as temp_csv:
                rows = csv.reader(temp_csv, delimiter=';')
                for row, row_data in enumerate(rows):
                    if row != 0:
                        chemist_id = row_data[4]
                        formel = row_data[1]
                        mol_weight = row_data[2]
                        smiles = row_data[3]
                        comp_id = row_data[0]
                        try:
                            qc_plate = row_data[13]
                        except IndexError:
                            qc_plate = "None"

                        all_data[chemist_id] = {
                            "formel": formel,
                            "mol_weight": mol_weight,
                            "smiles": smiles,
                            "comp_id": comp_id,
                            "qc_plate": qc_plate
                        }
                        all_data_2[row_data[5]] = {
                            "formel": row_data[2],
                            "mol_weight": row_data[3],
                            "smiles": row_data[4],
                            "comp_id": row_data[1],
                        }



    wb_final = load_workbook(filename=file)
    all_sheets = wb_final.sheetnames

    lables = []
    non_duplicates = []
    duplicates = []
    found_id = []
    not_found = []

    # for sheets in all_sheets:
    counter = 0
    ws = wb_final["DK"]
    for row, data in enumerate(ws):

        for col, cells in enumerate(data):
            if row == 0:
                if cells.value == "compound-id":
                    compound_id_col = col
            else:
                if col == compound_id_col:
                    temp_comp_id = cells.value

                    if temp_comp_id not in lables:
                        lables.append(temp_comp_id)
                        try:
                            all_data[temp_comp_id]
                        except KeyError:
                            # print(f"The following comp Id could not be found: {temp_comp_id}")
                            try:

                                all_data_2[temp_comp_id]
                            except KeyError:
                                not_found.append(temp_comp_id)
                                # print(sheets)
                            else:
                                found_id.append(temp_comp_id)
                        else:
                            found_id.append(temp_comp_id)

                    else:
                        duplicates.append(temp_comp_id)

    for temp_id in lables:
        if temp_id not in duplicates:
            non_duplicates.append(temp_id)

    try:
        ws = wb_final["All_data"]
    except KeyError:
        ws = wb_final.create_sheet("All_data")

    row_counter = 1
    col_counter = 1

    for counter, compounds in enumerate(found_id):
        if counter == 0:

            ws.cell(column=col_counter, row=row_counter, value="Compound-id")
            ws.cell(column=col_counter + 1, row=row_counter, value="formel")
            ws.cell(column=col_counter + 2, row=row_counter, value="mol_weight")
            ws.cell(column=col_counter + 3, row=row_counter, value="smiles")
        row_counter += 1


        try:
            all_data[compounds]
        except KeyError:
            formel = all_data_2[compounds]["formel"]
            mol_weight = all_data_2[compounds]["mol_weight"]
            smiles = all_data_2[compounds]["smiles"]
            comp_id = all_data_2[compounds]["comp_id"]
        else:
            formel = all_data[compounds]["formel"]
            mol_weight = all_data[compounds]["mol_weight"]
            smiles = all_data[compounds]["smiles"]
            comp_id = all_data[compounds]["comp_id"]

        ws.cell(column=col_counter, row=row_counter, value=compounds)
        ws.cell(column=col_counter + 1, row=row_counter, value=formel)
        ws.cell(column=col_counter + 2, row=row_counter, value=mol_weight)
        ws.cell(column=col_counter + 3, row=row_counter, value=smiles)
    wb_final.save(file)


    #
    # print(not_found)
    # # print(found_id)
    # # print(f"Found: {len(found_id)}, Not Found: {len(not_found)}")
    # print(non_duplicates)
    # print(len(non_duplicates))
    #
    temp_list = []
    for x in not_found:
        if x not in non_duplicates:
            temp_list.append(x)

    print(temp_list)
    print(len(temp_list))

    #
    #
    #
    # print(all_data.keys())

def testing(hit_amount, threshold, hit_data):
    hit_list = []
    print(hit_amount)
    print(threshold)
    print(hit_data)
    for counter, compound in enumerate(hit_data):
        if hit_amount:
            if hit_amount > counter:
                hit_list.append(compound)
        else:
            if hit_data[compound] <= threshold:
                hit_list.append(compound)
    print(hit_list)

if __name__ == "__main__":
    # config = configparser.ConfigParser()
    # config.read("config.ini")
    # headlines = [headlines for headlines in config["worklist_headlines"]]
    # print(headlines)
    # file = Path("C:/Users/phch/Desktop/test/Academic_collection_shadi.xlsx")
    # folder = Path(r"O:\Organisk kemi\molecular library running plate\FullPlates\NEW FILES\CSV FILES")
    #
    # excel_reader(file, folder)
    # file_reader(file)
    hit_amount = 5
    threshold = None
    hit_data = {4036579403: 105.03847938951073, 4036519540: 106.45892473582524, 4036576766: 128.30960527593987,
     4036570820: 95.23136205165845, 4036578746: 121.29804526860018, 4036509228: 99.82514274612238,
     4036573470: 109.8438157738513, 4036520185: 86.55757876671667, 4036510152: 96.41002946668537,
     4036570510: 84.33624402301209, 4036510345: 97.07491877772621, 4036510500: 81.91846471013633,
     4036519509: 96.41002946668537, 4036506366: 88.4918022170173, 4036485547: 122.37093483868878,
     4036583519: 104.11670102647685, 4036496377: 105.77892430407891, 4036575219: 99.20558679719797,
     4036490671: 109.6624823253856, 4036577530: 85.43935583451164, 4036495667: 99.88558722894427,
     4036570555: 89.76113635627705, 4036490345: 99.91580947035523, 4036577362: 81.1931309162736,
     4036497509: 91.16647058188607, 4036583473: 180.69986076181635, 4036497507: 121.19226742366186,
     4036520214: 104.78159033751767, 4036572632: 126.36027070493378, 4036583261: 119.03137716277914,
     4036577347: 130.802940192343, 4036578677: 49.036666055026075, 4036583482: 107.74336999579046,
     4036513737: 100.30869860869751, 4036509930: 94.05269463663151, 4036578266: 103.9202564573057,
     4036575291: 86.52735652530573, 4036519222: 107.35048085744818, 4036577559: 95.57891782788433,
     4036579314: 101.50247714442993, 4036509217: 139.52205683940116, 4036518929: 97.33180782971927,
     4036574572: 115.5407082798148, 4036510042: 92.08824894491998, 4036489891: 89.24735825229097,
     4036510288: 84.06424385031356, 4036575697: 101.03403240256026, 4036509185: 83.68646583267672,
     4036495908: 112.06515051755588, 4036510166: 89.47402506287305, 4036489828: 98.1629194685203,
     4036502985: 93.28202748065237, 4036497648: 94.64202834414498, 4036573434: 85.33357798957333,
     4036501924: 101.185143609615, 4036584848: 125.49893682472178, 4036582674: 136.51494381901196,
     4036514391: 94.2944725679191, 4036573393: 102.07669973123794, 4036577872: 78.77535160339784,
     4036579113: 106.08114671818839, 4036503445: 91.51402635811198, 4036509306: 100.76203222986175,
     4036515325: 87.72113506103814, 4036581590: 96.621585156562, 4036519215: 83.95846600537524,
     4036519395: 104.52470128552463, 4036519996: 82.62868738329357, 4036513902: 90.22958109814672,
     4036520146: 90.74335920213284, 4036482794: 130.16827312271312, 4036509256: 109.23937094563236,
     4036497714: 114.6793743996028, 4036580388: 86.92024566364805, 4036574608: 101.20025473032045,
     4036507772: 94.67225058555591, 4036576359: 84.74424428205987, 4036578689: 80.98157522639698,
     4036496302: 88.09891307867497, 4036578665: 89.64024739063326, 4036487263: 93.17624963571407,
     4036507787: 76.73535030815893, 4036487642: 88.85446911394864, 4036514357: 109.04292637646121,
     4036572646: 127.14604898161842, 4036518541: 143.23939253294768, 4036515324: 105.9602577525446,
     4036518780: 93.08558291148123, 4036578513: 91.43847075458461, 4036518774: 85.9229116970868,
     4036576915: 89.36824721793475, 4036578850: 90.51669239155073, 4036519157: 93.52380541193995,
     4036513609: 98.08736386499294, 4036579333: 90.4260256673179, 4036578272: 92.22424903126922,
     4036578995: 106.38336913229787, 4036576957: 112.8055954321241, 4036505853: 119.1824883698339,
     4036515442: 105.08381275162715, 4036487233: 99.20558679719797, 4036579000: 88.20469092361328,
     4036494726: 88.74869126901034, 4036578108: 63.815342104979116, 4036571227: 81.84290910660896,
     4036502851: 92.17891566915281, 4036490087: 98.31403067557503, 4036578564: 100.97358791973836,
     4036512300: 86.78424557729879, 4036578551: 85.46957807592258, 4036494676: 84.13979945384092,
     4036485195: 109.01270413505026, 4036518949: 115.20826362429437, 4036570682: 121.53982319988773,
     4036519318: 103.85981197448379, 4036499449: 89.14158040735263, 4036584879: 94.5815838613231,
     4036578217: 90.21446997744125, 4036518505: 81.96379807225276, 4036578253: 81.49535333038307,
     4036519317: 89.05091368311982, 4036577511: 90.12380325320842, 4036518719: 79.21357410385659,
     4036508286: 76.91668375662461, 4036503433: 89.73091411486611, 4036488940: 111.38515008580958,
     4036515728: 142.74072554966702, 4036581683: 99.53803145271839, 4036487246: 102.96825585286085,
     4036502918: 72.47401426921542, 4036506020: 92.5264714453787, 4036515482: 90.72824808142737,
     4036511157: 99.4171424870746, 4036499687: 84.85002212699818, 4036511361: 89.2775804937019,
     4036505105: 99.50780921130745, 4036505810: 98.60114196897902, 4036500945: 81.38957548544475,
     4036494730: 83.71668807408768, 4036504869: 101.33625481666972, 4036491234: 112.44292853519273,
     4036514158: 105.20470171727094, 4036584880: 99.11492007296512, 4036505400: 88.5371355791337,
     4036502834: 89.94246980474273, 4036500997: 85.43935583451164, 4036577504: 94.12825024015889,
     4036504873: 81.67668677884875, 4036507519: 79.8784634148974, 4036499730: 84.69891091994344,
     4036519869: 100.42958757434133, 4036569848: 88.41624661348992, 4036508211: 107.69803663367406,
     4036505044: 93.55402765335089, 4036505927: 117.42959836799898, 4036577664: 104.70603473399031,
     4036572038: 89.67046963204422, 4036517995: 96.65180739797295, 4036495059: 83.06690988375232,
     4036504666: 82.35668721059506, 4036487358: 88.6580245447775, 4036504737: 100.26336524658112,
     4036505932: 93.31224972206333, 4036505277: 76.19134996276188, 4036572214: 70.64556866385313,
     4036505364: 90.44113678802337, 4036512042: 80.120241346185, 4036572544: 111.18870551663842,
     4036505445: 135.12472071410838, 4036504802: 100.82247671268364, 4036578205: 118.01893207551244,
     4036499570: 98.10247498569841, 4036578845: 83.94335488466977, 4036517438: 76.99223936015197,
     4036508321: 88.3709132513735, 4036505600: 100.74692110915626, 4036507511: 82.64379850399907,
     4036499494: 94.15847248156983, 4036513779: 89.12646928664716, 4036504799: 91.2722484268244,
     4036581734: 94.80825067190518, 4036491409: 99.62869817695123, 4036484558: 121.4491564756549,
     4036499660: 100.64114326421796, 4036488501: 102.1522553347653, 4036505068: 89.64024739063326,
     4036487173: 108.09092577201638, 4036499787: 92.10336006562545, 4036488772: 87.70602394033267,
     4036570953: 76.2366833248783, 4036485061: 79.81801893207552, 4036499756: 78.71490712057596,
     4036486084: 80.66424169158203, 4036513992: 74.45357108163245, 4036485014: 82.19046488283486,
     4036570315: 121.60026768270966, 4036491021: 145.8385052942891, 4036517418: 132.6313857977053,
     4036504677: 119.45448854253242, 4036517430: 86.46691204248386, 4036518031: 87.73624618174362,
     4036504807: 66.06689909009468, 4036505379: 79.3797964316168, 4036580188: 74.96734918561853,
     4036518056: 84.15491057454639, 4036570973: 76.5237946182823, 4036499561: 95.26158429306939,
     4036505274: 90.2446922188522, 4036499562: 106.98781396051679, 4036504843: 108.34781482400942,
     4036489628: 114.6793743996028, 4036504853: 111.44559456863146, 4036486103: 98.04203050287651,
     4036499842: 88.46157997560634, 4036493174: 100.32380972940302, 4036501459: 75.11846039267327,
     4036487916: 91.24202618541347, 4036513970: 87.08646799140826, 4036495409: 83.73179919479315,
     4036577682: 71.5069025440651, 4036482248: 82.81002083175927, 4036499793: 80.98157522639698,
     4036484965: 88.68824678618844, 4036483537: 94.11313911945342, 4036505020: 124.4713806167496,
     4036512821: 121.20737854436732, 4036570929: 87.52469049186699, 4036499328: 92.11847118633092,
     4036504756: 93.67491661899469, 4036487793: 106.64025818429091, 4036500774: 74.982460306324,
     4036499339: 92.20913791056375, 4036505056: 83.73179919479315, 4036500048: 84.01891048819715,
     4036505347: 65.85534340021803, 4036570194: 100.05180955670448, 4036572755: 92.13358230703639,
     4036493848: 117.83759862704675, 4036488220: 136.7113883881831, 4036505503: 112.09537275896682,
     4036490271: 100.14247628093732, 4036499821: 112.36737293166534, 4036495519: 101.3513659373752,
     4036499387: 101.59314386866278, 4036493680: 72.51934763133184, 4036505587: 93.93180567098774,
     4036484766: 80.7397972951094, 4036516202: 99.71936490118408, 4036485081: 83.95846600537524,
     4036501110: 102.21269981758718, 4036485192: 106.35314689088692, 4036500397: 113.04737336341168,
     4036486701: 107.69803663367406, 4036500410: 131.22605157209622, 4036513994: 105.00825714809979,
     4036516171: 121.88737897611365, 4036517344: 113.8784850022127, 4036517010: 116.38693103932131,
     4036517558: 100.45980981575227, 4036500529: 89.20202489017454, 4036487829: 94.06780575733701,
     4036517351: 95.12558420672013, 4036517761: 83.29357669433442, 4036512982: 91.31758178894081,
     4036512886: 90.80380368495472, 4036517910: 116.2207087115611}
    testing(hit_amount, threshold, hit_data)


